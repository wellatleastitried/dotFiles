#!/usr/bin/perl

use strict;
use warnings;
use IO::Socket;
use Term::ANSIColor;

sub display_help() {
    print <<'END_HELP';
Usage: quickScan [-v|--verbose] <host> <start-port> <end-port>

Arguments:
    <host>          - The target host to scan (e.g. 127.0.0.1)
    <start-port>    - The starting port number of the range to scan
    <end-port>      - The ending port number of the range to scan

Examples:
    quickScan 127.0.0.1 1 1024
    quickScan -v 127.0.0.1 1 1024
    quickScan --verbose 127.0.0.1 1 1024

Description:
    This script scans a range of ports on a specified host to determine which ports are open or closed.

Options:
    --help          - Displays this help menu
    -v, --verbose   - Prints all output to the console


END_HELP
    exit;
}
my $open_count = 0;
my $verbose = 1;
if (@ARGV == 1 && $ARGV[0] eq '--help') {
    display_help()
}
if (@ARGV < 3 || @ARGV > 4) {
    die "Usage: quickScan <host> <start-port> <end-port>\n";
}
my ($host, $start_port, $end_port);
if (@ARGV == 4) {
    if ($ARGV[0] eq '-v' || $ARGV[0] eq '--verbose') {
        $verbose = 0;
        ($host, $start_port, $end_port) = @ARGV[1..3];
    } else {
        die "Invalid option: $ARGV[0]\nUsage: quickScan [-v|--verbose] <host> <start-port> <end-port>\n";
    }
} else {
    ($host, $start_port, $end_port) = @ARGV;
}
if (!defined $host || !defined $start_port || !defined $end_port) {
    die "Usage quickScan [-v|--verbose] <host> <start-port> <end-port>\n";
}
if ($host !~ /^(\d{1,3}\.){3}\d{1,3}$/) {
    die "Invalid IP address format: $host\n";
}
foreach my $octet (split(/\./, $host)) {
    if ($octet < 0 || $octet > 255 || ($octet =~ /^0\d+$/ && $octet ne "0")) {
        die "Invalid IP address format: $host\n";
    }
}
if ($end_port < $start_port || $start_port <= 0 || $end_port >= 65535) {
    die "Invalid port range: exiting now...";
}
my $timeout = 3;
sub scan_port {
    my ($host, $port) = @_;
    my $socket = IO::Socket::INET->new(
        PeerAddr => $host,
        PeerPort => $port,
        Proto    => 'tcp',
        Timeout  => $timeout
    );
    if ($socket) {
        close($socket);
        return 1;
    } else {
        return 0;
    }
}
print color('blue'), "Scanning $host...\n", color('reset');
if ($verbose) {
    for my $port ($start_port..$end_port) {
        if (scan_port($host, $port)) {
            $open_count++;
            print color('green'), "Port $port is open\n", color('reset');
        }
    }
} else {
    for my $port ($start_port..$end_port) {
        if (scan_port($host, $port)) {
            $open_count++;
            print color('green'), "Port $port is open\n", color('reset');
        } else {
            print color('red'), "Port $port is closed\n", color('reset')
        }
    }
}
if ($open_count eq 1) {
    print color('blue'), "There is 1 port open on $host in the range of ports: $start_port-$end_port.\n", color('reset');
} else {
    print color('blue'), "There are $open_count ports open on $host in the range of ports: $start_port-$end_port.\n", color('reset');
}
